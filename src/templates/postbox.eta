// Code generated by https://github.com/Fair-Bytes/aapi-codegen version <%= it.aapiCodegenVersion %> DO NOT EDIT.
package <%= it.package %>

import (
	"errors"

	"github.com/ThreeDotsLabs/watermill"
	"github.com/ThreeDotsLabs/watermill-sql/v2/pkg/sql"
	"github.com/ThreeDotsLabs/watermill/components/forwarder"
	"github.com/ThreeDotsLabs/watermill/message"
)

var (
	ErrConfigMissingSubscriberOrDB = errors.New("postbox config expected either subscriber or postgresDB")
)

var (
	defaultPostboxTopic             = "asyncapi_postbox"
	defaultConsumerGroup            = "asyncapi_group"
	defaultLogger                   = watermill.NewStdLogger(true, false)
	defaultPostgresSubscriberConfig = sql.SubscriberConfig{
		SchemaAdapter:    sql.DefaultPostgreSQLSchema{},
		OffsetsAdapter:   sql.DefaultPostgreSQLOffsetsAdapter{},
		InitializeSchema: true,
		ConsumerGroup:    defaultConsumerGroup,
	}
	defaultPostgresPublisherConfig = sql.PublisherConfig{
		SchemaAdapter: sql.DefaultPostgreSQLSchema{},
	}
)

type PostboxConfig struct {
	Logger          watermill.LoggerAdapter
	PostgresDB      sql.Beginner
	Subscriber      *sql.Subscriber
	PublisherConfig *sql.PublisherConfig
	PostboxTopic    string
}

func (c *PostboxConfig) setDefaultsAndValidate() error {
	if c.Logger == nil {
		c.Logger = defaultLogger
	}

	if c.Subscriber == nil && c.PostgresDB != nil {
		if defaultSubscriber, err := sql.NewSubscriber(
			c.PostgresDB,
			defaultPostgresSubscriberConfig,
			c.Logger,
		); err != nil {
			return err
		} else {
			c.Subscriber = defaultSubscriber
		}
	} else if c.Subscriber == nil && c.PostgresDB == nil {
		return ErrConfigMissingSubscriberOrDB
	}

	if c.PublisherConfig == nil {
		c.PublisherConfig = &defaultPostgresPublisherConfig
	}

	if c.PostboxTopic == "" {
		c.PostboxTopic = defaultPostboxTopic
	}

	return nil
}

type Publisher struct {
	publisher     message.Publisher
	postboxConfig PostboxConfig
}

func newPostboxPublisher(publisher message.Publisher, postboxConfig PostboxConfig) (Publisher, error) {
	if err := postboxConfig.setDefaultsAndValidate(); err != nil {
		return Publisher{}, err
	}
	
	if err := postboxConfig.Subscriber.SubscribeInitialize(postboxConfig.PostboxTopic); err != nil {
		return Publisher{}, err
	}

	return Publisher{
		publisher,
		postboxConfig,
	}, nil
}

func (p Publisher) NewTx(tx sql.ContextExecutor) (*Publisher, error) {
	pub, err := sql.NewPublisher(tx, *p.postboxConfig.PublisherConfig, p.postboxConfig.Logger)
	if err != nil {
		return nil, err
	}

	publisher := forwarder.NewPublisher(pub, forwarder.PublisherConfig{
		ForwarderTopic: p.postboxConfig.PostboxTopic,
	})

	return &Publisher{
		publisher: publisher,
	}, err
}
