// DO NOT EDIT. This file is autogenerated by aapi-codegen
package asyncapi

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"regexp"
	"strings"

	"github.com/ThreeDotsLabs/watermill/message"
)

var (
	ErrUnknownMessageId          = errors.New("unknown message id")
	ErrExpectedStruct            = errors.New("expected a struct")
	ErrChannelMismatchesAddress  = errors.New("channel mismatches address")
	ErrParameterCouldNotSetValue = errors.New("could not set value on parameter")
)

type AsyncApiReceiver interface {
	// Handles operation ReceiveLightMeasurement with message LightMeasured on a channel with parameters
	ReceiveLightMeasurement_LightMeasured(msg Message, payload LightingMeasured_LightMeasured, parameters LightingMeasuredParameters) error

	// Handles operation ReceiveTurnOn with message TurnOnOff on a channel with parameters
	ReceiveTurnOn_TurnOnOff(msg Message, payload LightTurnOn_TurnOnOff, parameters LightTurnOnParameters) error

	// Handles operation ReceiveDimLight with message DimLight on a channel with parameters
	ReceiveDimLight_DimLight(msg Message, payload LightsDim_DimLight, parameters LightsDimParameters) error
}

// Router plugin with all operations
type AsyncApi struct {
	receiver   AsyncApiReceiver
	subscriber message.Subscriber

	publisher message.Publisher

	router *message.Router
}

func NewAsyncApi(publisher message.Publisher, subscriber message.Subscriber, receiver AsyncApiReceiver) *AsyncApi {
	return &AsyncApi{
		publisher:  publisher,
		subscriber: subscriber,
		receiver:   receiver,

		router: nil,
	}
}

func (a *AsyncApi) Plugin(r *message.Router) error {
	a.router = r

	return nil
}

// Receiver handlers for channels with parameters
func (a AsyncApi) AddReceiveLightMeasurementChannelReceiver(parameters LightingMeasuredParameters) (*message.Handler, error) {
	if a.router == nil {
		panic("plugin uninitialised. call router.AddPlugin(asyncApi.Plugin) first")
	}

	address := marshalChannelAddress("smartylighting.streetlights.1.0.event.{streetlightId}.lighting.measured", parameters)

	handler := a.router.AddNoPublisherHandler(
		fmt.Sprintf("%s_Handler", address),
		address,
		a.subscriber,
		a.wrapperReceiveLightMeasurement,
	)

	if err := a.router.RunHandlers(context.Background()); err != nil {
		return nil, err
	}

	return handler, nil
}

func (a AsyncApi) AddReceiveTurnOnChannelReceiver(parameters LightTurnOnParameters) (*message.Handler, error) {
	if a.router == nil {
		panic("plugin uninitialised. call router.AddPlugin(asyncApi.Plugin) first")
	}

	address := marshalChannelAddress("smartylighting.streetlights.1.0.action.{streetlightId}.turn.on", parameters)

	handler := a.router.AddNoPublisherHandler(
		fmt.Sprintf("%s_Handler", address),
		address,
		a.subscriber,
		a.wrapperReceiveTurnOn,
	)

	if err := a.router.RunHandlers(context.Background()); err != nil {
		return nil, err
	}

	return handler, nil
}

func (a AsyncApi) AddReceiveDimLightChannelReceiver(parameters LightsDimParameters) (*message.Handler, error) {
	if a.router == nil {
		panic("plugin uninitialised. call router.AddPlugin(asyncApi.Plugin) first")
	}

	address := marshalChannelAddress("smartylighting.streetlights.1.0.action.{streetlightId}.dim", parameters)

	handler := a.router.AddNoPublisherHandler(
		fmt.Sprintf("%s_Handler", address),
		address,
		a.subscriber,
		a.wrapperReceiveDimLight,
	)

	if err := a.router.RunHandlers(context.Background()); err != nil {
		return nil, err
	}

	return handler, nil
}

// Channel parameters
func marshalChannelAddress(address string, parameters interface{}) string {
	v := reflect.ValueOf(parameters)
	for i := 0; i < v.NumField(); i++ {
		pName := v.Type().Field(i).Tag.Get("parameter")
		pValue := v.Field(i).String()

		address = strings.ReplaceAll(address, fmt.Sprintf("{%s}", pName), pValue)
	}

	return address
}

func unmarshalChannelAddress(channel string, address string, parameters interface{}) error {
	if t := reflect.TypeOf(parameters); t.Kind() != reflect.Pointer {
		return ErrExpectedPointerType
	}

	pStruct := reflect.ValueOf(parameters).Elem()
	addressRegex := fmt.Sprintf("^%s$", address)
	for i := 0; i < pStruct.NumField(); i++ {
		pName := pStruct.Type().Field(i).Tag.Get("parameter")
		pField := pStruct.Type().Field(i).Name

		addressRegex = strings.ReplaceAll(addressRegex, fmt.Sprintf("{%s}", pName), fmt.Sprintf("(?<%s>.*)", pField))
	}

	re, err := regexp.Compile(addressRegex)
	if err != nil {
		return err
	} else if !re.MatchString(channel) {
		return ErrChannelMismatchesAddress
	} else if pStruct.Kind() != reflect.Struct {
		return ErrExpectedStruct
	}

	subMatch := re.FindStringSubmatch(channel)
	for i, pField := range re.SubexpNames() {
		if i == 0 {
			continue
		}

		f := pStruct.FieldByName(pField)
		if f.IsValid() && f.CanSet() && f.Kind() == reflect.String {
			f.SetString(subMatch[i])
		} else {
			return ErrParameterCouldNotSetValue
		}
	}

	return nil
}

type LightingMeasuredParameters struct {
	StreetlightId string `parameter:"streetlightId"`
}

type LightTurnOnParameters struct {
	StreetlightId string `parameter:"streetlightId"`
}

type LightsDimParameters struct {
	StreetlightId string `parameter:"streetlightId"`
}

type LightTurnOffParameters struct {
	StreetlightId string `parameter:"streetlightId"`
}

// Send Operation
func (a AsyncApi) LightMeasurement_LightMeasured(uuid string, payload LightingMeasured_LightMeasured, parameters LightingMeasuredParameters) error {
	msg, err := NewMessage(uuid, payload)
	if err != nil {
		return err
	}
	address := marshalChannelAddress("smartylighting.streetlights.1.0.event.{streetlightId}.lighting.measured", parameters)
	return a.publisher.Publish(address, msg.Raw())
}

func (a AsyncApi) TurnOn_TurnOnOff(uuid string, payload LightTurnOn_TurnOnOff, parameters LightTurnOnParameters) error {
	msg, err := NewMessage(uuid, payload)
	if err != nil {
		return err
	}
	address := marshalChannelAddress("smartylighting.streetlights.1.0.action.{streetlightId}.turn.on", parameters)
	return a.publisher.Publish(address, msg.Raw())
}

func (a AsyncApi) TurnOff_TurnOnOff(uuid string, payload LightTurnOff_TurnOnOff, parameters LightTurnOffParameters) error {
	msg, err := NewMessage(uuid, payload)
	if err != nil {
		return err
	}
	address := marshalChannelAddress("smartylighting.streetlights.1.0.action.{streetlightId}.turn.off", parameters)
	return a.publisher.Publish(address, msg.Raw())
}

func (a AsyncApi) DimLight_DimLight(uuid string, payload LightsDim_DimLight, parameters LightsDimParameters) error {
	msg, err := NewMessage(uuid, payload)
	if err != nil {
		return err
	}
	address := marshalChannelAddress("smartylighting.streetlights.1.0.action.{streetlightId}.dim", parameters)
	return a.publisher.Publish(address, msg.Raw())
}

// Receiver wrapper
func (a AsyncApi) wrapperReceiveLightMeasurement(m *message.Message) error {
	msg := Message{}
	if err := msg.Load(m); err != nil {
		return err
	}

	// extract parameters from channel
	channel := message.SubscribeTopicFromCtx(m.Context())
	var parameters LightingMeasuredParameters
	if err := unmarshalChannelAddress(channel, "smartylighting.streetlights.1.0.event.{streetlightId}.lighting.measured", &parameters); err != nil {
		return err
	}

	switch msg.Id() {
	case "LightMeasured":
		var payload LightingMeasured_LightMeasured
		if err := msg.Unmarshal(&payload); err != nil {
			return err
		}

		return a.receiver.ReceiveLightMeasurement_LightMeasured(msg, payload, parameters)
	default:
		return ErrUnknownMessageId
	}
}

func (a AsyncApi) wrapperReceiveTurnOn(m *message.Message) error {
	msg := Message{}
	if err := msg.Load(m); err != nil {
		return err
	}

	// extract parameters from channel
	channel := message.SubscribeTopicFromCtx(m.Context())
	var parameters LightTurnOnParameters
	if err := unmarshalChannelAddress(channel, "smartylighting.streetlights.1.0.action.{streetlightId}.turn.on", &parameters); err != nil {
		return err
	}

	switch msg.Id() {
	case "TurnOnOff":
		var payload LightTurnOn_TurnOnOff
		if err := msg.Unmarshal(&payload); err != nil {
			return err
		}

		return a.receiver.ReceiveTurnOn_TurnOnOff(msg, payload, parameters)
	default:
		return ErrUnknownMessageId
	}
}

func (a AsyncApi) wrapperReceiveDimLight(m *message.Message) error {
	msg := Message{}
	if err := msg.Load(m); err != nil {
		return err
	}

	// extract parameters from channel
	channel := message.SubscribeTopicFromCtx(m.Context())
	var parameters LightsDimParameters
	if err := unmarshalChannelAddress(channel, "smartylighting.streetlights.1.0.action.{streetlightId}.dim", &parameters); err != nil {
		return err
	}

	switch msg.Id() {
	case "DimLight":
		var payload LightsDim_DimLight
		if err := msg.Unmarshal(&payload); err != nil {
			return err
		}

		return a.receiver.ReceiveDimLight_DimLight(msg, payload, parameters)
	default:
		return ErrUnknownMessageId
	}
}
