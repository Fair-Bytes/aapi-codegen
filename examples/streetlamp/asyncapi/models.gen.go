// DO NOT EDIT. This file is autogenerated by aapi-codegen
package asyncapi

import (
	"encoding/json"
	"errors"
	"reflect"
	"strings"

	"github.com/ThreeDotsLabs/watermill/message"

	// Model dependencies
	"github.com/google/uuid"
	"time"
)

const (
	// Spec document
	AsyncapiDocumentVersion string = "v1.0.0"

	// Content-Types
	ApplicationJson string = "application/json"

	// Metadata fields
	MessageId   string = "Message-Id"
	ContentType string = "Content-Type"
	SpecVersion string = "Spec-Version"
)

var (
	ErrMessageAlreadyLoaded   = errors.New("message already loaded")
	ErrUnsupportedContentType = errors.New("message content type is not supported")
	ErrExpectedPointerType    = errors.New("expected a pointer")
	ErrTypeMismatch           = errors.New("mismatch of message and struct type")
)

type Message struct {
	msg *message.Message
}

func NewMessage(uuid string, m interface{}) (*Message, error) {
	var mId string
	if t := reflect.TypeOf(m); t.Kind() == reflect.Pointer {
		mId = trimMsgPayload(t.Elem().Name())
	} else {
		mId = trimMsgPayload(t.Name())
	}

	data, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}

	msg := message.NewMessage(uuid, data)
	msg.Metadata.Set(MessageId, mId)
	msg.Metadata.Set(ContentType, ApplicationJson)
	msg.Metadata.Set(SpecVersion, AsyncapiDocumentVersion)

	return &Message{msg}, nil
}

func (m *Message) Load(msg *message.Message) error {
	if m.msg != nil {
		return ErrMessageAlreadyLoaded
	}

	m.msg = msg
	return nil
}

func (m Message) Raw() *message.Message {
	return m.msg
}

func (msg Message) Unmarshal(m interface{}) error {
	mt := reflect.TypeOf(m)
	if mt.Kind() != reflect.Pointer {
		return ErrExpectedPointerType
	}

	if msg.MsgId() != trimMsgPayload(mt.Elem().Name()) {
		return ErrTypeMismatch
	}

	switch msg.ContentType() {
	case ApplicationJson:
		return json.Unmarshal(msg.msg.Payload, m)
	default:
		return ErrUnsupportedContentType
	}
}

func trimMsgPayload(s string) string {
	return strings.TrimSuffix(s, "MsgPayload")
}

func (m Message) UUID() string {
	return m.msg.UUID
}

func (m Message) MsgId() string {
	return m.msg.Metadata.Get(MessageId)
}

func (m Message) ContentType() string {
	return m.msg.Metadata.Get(ContentType)
}

func (m Message) SpecVersion() string {
	return m.msg.Metadata.Get(SpecVersion)
}

func (m Message) Ack() bool {
	return m.msg.Ack()
}

func (m Message) Nack() bool {
	return m.msg.Nack()
}

// Models
type Address struct {
	Street string `json:"street"`
	City   string `json:"city"`
}

type StreetlightPayload struct {
	Id      uuid.UUID `json:"id"`
	Address Address   `json:"address"`
}

type LightMeasuredPayload struct {
	// Light intensity measured in lumens.
	Lumens *int `json:"lumens,omitempty"`
	// Date and time when the message was sent.
	SentAt *time.Time `json:"sentAt,omitempty"`
}

type TurnOnOffPayload struct {
	// Whether to turn on or off the light.
	Command *string `json:"command,omitempty"`
	// Date and time when the message was sent.
	SentAt *time.Time `json:"sentAt,omitempty"`
}

type DimLightPoint struct {
	// Percentage to which the light should be dimmed to.
	Percentage *int `json:"percentage,omitempty"`
	// Date and time when the message was sent.
	SentAt *time.Time `json:"sentAt,omitempty"`
}

type DimLightPayload []DimLightPoint

// StreetlightMsgPayload implements message streetlight
type StreetlightMsgPayload struct {
	StreetlightPayload
}

// LightMeasuredMsgPayload implements message lightMeasured
type LightMeasuredMsgPayload struct {
	LightMeasuredPayload
}

// TurnOnOffMsgPayload implements message turnOnOff
type TurnOnOffMsgPayload struct {
	TurnOnOffPayload
}

// DimLightMsgPayload implements message dimLight
type DimLightMsgPayload struct {
	DimLightPayload
}

// StreetlightRecvMsg implements message streetlight for message received by a channel
type StreetlightRecvMsg struct {
	Message
}

func (m StreetlightRecvMsg) UnmarshalPayload() (StreetlightMsgPayload, error) {
	var payload StreetlightMsgPayload
	if err := m.Unmarshal(&payload); err != nil {
		return StreetlightMsgPayload{}, err
	}
	return payload, nil
}

// LightMeasuredRecvMsg implements message lightMeasured for message received by a channel
type LightMeasuredRecvMsg struct {
	Message
}

func (m LightMeasuredRecvMsg) UnmarshalPayload() (LightMeasuredMsgPayload, error) {
	var payload LightMeasuredMsgPayload
	if err := m.Unmarshal(&payload); err != nil {
		return LightMeasuredMsgPayload{}, err
	}
	return payload, nil
}

// TurnOnOffRecvMsg implements message turnOnOff for message received by a channel
type TurnOnOffRecvMsg struct {
	Message
}

func (m TurnOnOffRecvMsg) UnmarshalPayload() (TurnOnOffMsgPayload, error) {
	var payload TurnOnOffMsgPayload
	if err := m.Unmarshal(&payload); err != nil {
		return TurnOnOffMsgPayload{}, err
	}
	return payload, nil
}

// DimLightRecvMsg implements message dimLight for message received by a channel
type DimLightRecvMsg struct {
	Message
}

func (m DimLightRecvMsg) UnmarshalPayload() (DimLightMsgPayload, error) {
	var payload DimLightMsgPayload
	if err := m.Unmarshal(&payload); err != nil {
		return DimLightMsgPayload{}, err
	}
	return payload, nil
}
